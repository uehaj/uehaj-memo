{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/60abb9be0dfac0755dcf/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"de632d86-0705-5080-bb40-8ffbbe523c62","excerpt":"第13回 オフラインリアルタイムどう書くの問題「積み木の水槽」を、JVM上で動作するHaskellライクな言語Frege(フレーゲ)で解きました。","html":"<p><a href=\"http://atnd.org/events/41603\">第13回 オフラインリアルタイムどう書く</a>の問題「<a href=\"http://nabetani.sakura.ne.jp/hena/ord13blocktup/\">積み木の水槽</a>」を、JVM上で動作するHaskellライクな言語<a href=\"https://github.com/Frege/frege/wiki/_pages\">Frege</a>(フレーゲ)で解きました。</p>\n<pre><code class=\"language-frege:shortest.fr\">-- http://nabetani.sakura.ne.jp/hena/ord13blocktup/\n     \ndata Cell = Wall | Empty | Water\nderive Eq Cell -- Haskellのdata Cell = ... deriving(Eq)\n\n-- セルを表示する\ninstance Show Cell where\n    show Wall = \"*\"\n    show Empty = \" \"\n    show Water = \"+\"\n\n-- 盤面を表示する\ndata Matrix = Matrix [ [ Cell ] ] Int Int\nderive Eq Matrix\ninstance Show Matrix where\n    show (Matrix xs w h) = \"w=\"++show w++\",h=\"++show h++\"\\n\"++ unlines (map showLine xs)\n        where\n          showLine :: [Cell] -> String\n          showLine line = \"[\" ++ foldl (++) \"\" (map show line) ++ \"]\"\n\n-- 盤面を生成する\ntoMatrix :: String -> Matrix\ntoMatrix str =\n    let maxx = length str\n        maxy = maximum $ map (\\ch -> ord ch - ord '0') (unpacked str)\n        makeLine n maxn = replicate n Wall ++ replicate (maxn-n) Empty\n    in Matrix (map (\\ch -> makeLine (ord ch - ord '0') maxy) (unpacked str)) maxx maxy\n\n-- 指定した座標(xPos,yPos)のセル内容を取得する\ngetCell :: Matrix -> Int -> Int -> Cell\ngetCell (Matrix mat w h) xPos yPos\n      | (0 &#x3C;= xPos) &#x26;&#x26; ( xPos &#x3C; w ) &#x26;&#x26; (0 &#x3C;= yPos) &#x26;&#x26; (yPos &#x3C; h) = mat !! xPos !! yPos\n      | otherwise = Empty\n\n-- Matrix型の盤面の指定した座標(xPos,yPos)にセル内容cを設定する\nsetCell:: Matrix -> Int -> Int -> Cell -> Matrix\nsetCell (Matrix mat w h) xPos yPos c\n      | ( xPos &#x3C; w ) &#x26;&#x26; (yPos &#x3C; h) = Matrix (setCell' mat xPos yPos c) w h\n\n-- [[Cell]]型の盤面の指定した座標(xPos,yPos)にセル内容cを設定する\nsetCell' :: [[Cell]] -> Int -> Int -> Cell -> [[Cell]]\nsetCell' (x:xs) xPos yPos c\n    | xPos == 0 = setCellY x yPos c : xs\n    | otherwise = x:setCell' xs (xPos-1) yPos c\n\n-- Cellの列の指定した座標(yPos)にセル内容cを設定する\nsetCellY :: [Cell] -> Int -> Cell -> [Cell]\nsetCellY (x:xs) yPos c\n    | yPos == 0 = c:xs\n    | otherwise = x:setCellY xs (yPos-1) c\n\n-- 以下のtmpは、以下が通らなかったための苦肉の策。fregeのバグ?\n-- fillWater m0 = foldl (\\mat (x,y)-> fillWaterCell mat x y) m0 (cells m0)\ntmp:: Matrix -> (Int, Int) -> Matrix\ntmp mat (x,y) = fillWaterCell mat x y\n\n-- 盤面に水を満たす\nfillWater :: Matrix -> Matrix\nfillWater m0 = foldl tmp m0 (cells m0)\n  where\n    cells (Matrix _ width height) = do\n        y &#x3C;- [0.. height-1]\n        x &#x3C;- [0.. width-1]\n        return (x, y)\n\nfillWaterCell mat x y\n    | isKeepWater mat x y &#x26;&#x26; getCell mat x y == Empty = setCell mat x y Water\n    | otherwise = mat\n\n-- 指定した座標x,yは水を保持できるか？\nisKeepWater :: Matrix -> Int -> Int -> Bool\nisKeepWater mat x y\n    | hereOK mat x y = true\n    | leftOK mat x y &#x26;&#x26; bottomOK mat x y &#x26;&#x26; rightThroughOK mat x y = true\n    | otherwise = false\n    where\n        ok x = (x == Wall) || (x == Water)\n        hereOK mat x y = ok $ getCell mat x y\n        leftOK mat x y = ok $ getCell mat (x-1) y\n        bottomOK mat x y = ok $ getCell mat x (y-1)\n        rightOK mat x y = ok $ getCell mat (x+1) y\n        rightThroughOK mat x y\n            | bottomOK mat x y &#x26;&#x26; rightOK mat x y = true\n            | bottomOK mat x y &#x26;&#x26; rightThroughOK mat (x+1) y = true\n            | otherwise = false\n           \n-- 水の個数を返す\ncountAllWater :: Matrix -> Int\ncountAllWater (Matrix m _ _) = foldr ((+) . countAllWaterY) 0 m\n    where\n        countAllWaterY [] = 0\n        countAllWaterY (Water:xs) = 1 + countAllWaterY xs\n        countAllWaterY (x:xs) = 0 + countAllWaterY xs\n\n-- x.atoiはHaskellのread xと等価(xがintとして解釈可能である文字列の場合)。\ntest :: String -> String -> Bool\ntest dat expected = expected.atoi == (countAllWater $ fillWater (toMatrix dat))\n\nmain :: [String] -> IO ()\nmain _ = do\n   println $ test \"83141310145169154671122\" \"24\" {-0-}\n   println $ test \"923111128\" \"45\" {-1-}\n   println $ test \"923101128\" \"1\" {-2-}\n   println $ test \"903111128\" \"9\" {-3-}\n   println $ test \"3\" \"0\" {-4-}\n   println $ test \"31\" \"0\" {-5-}\n   println $ test \"412\" \"1\" {-6-}\n   println $ test \"3124\" \"3\" {-7-}\n   println $ test \"11111\" \"0\" {-8-}\n   println $ test \"222111\" \"0\" {-9-}\n   println $ test \"335544\" \"0\" {-10-}\n   println $ test \"1223455321\" \"0\" {-11-}\n   println $ test \"000\" \"0\" {-12-}\n   println $ test \"000100020003121\" \"1\" {-13-}\n   println $ test \"1213141516171819181716151413121\" \"56\" {-14-}\n   println $ test \"712131415161718191817161514131216\" \"117\" {-15-}\n   println $ test \"712131405161718191817161514031216\" \"64\" {-16-}\n   println $ test \"03205301204342100\" \"1\" {-17-}\n   println $ test \"0912830485711120342\" \"18\" {-18-}\n   println $ test \"1113241120998943327631001\" \"20\" {-19-}\n   println $ test \"7688167781598943035023813337019904732\" \"41\" {-20-}\n   println $ test \"2032075902729233234129146823006063388\" \"79\" {-21-}\n   println $ test \"8323636570846582397534533\" \"44\" {-22-}\n   println $ test \"2142555257761672319599209190604843\" \"41\" {-23-}\n   println $ test \"06424633785085474133925235\" \"51\" {-24-}\n   println $ test \"503144400846933212134\" \"21\" {-25-}\n   println $ test \"1204706243676306476295999864\" \"21\" {-26-}\n   println $ test \"050527640248767717738306306596466224\" \"29\" {-27-}\n   println $ test \"5926294098216193922825\" \"65\" {-28-}\n   println $ test \"655589141599534035\" \"29\" {-29-}\n   println $ test \"7411279689677738\" \"34\" {-30-}\n   println $ test \"268131111165754619136819109839402\" \"102\" {-31-}\n</code></pre>","frontmatter":{"title":"第13回オフラインリアルタイムどう書くの問題をFregeで解く","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/blog/60abb9be0dfac0755dcf/","previous":{"fields":{"slug":"/blog/68fa097e03d0572aefe4/"},"frontmatter":{"title":"Node.jsでPEG.jsでBrainf*ck"}},"next":{"fields":{"slug":"/blog/5d9fec1ba6cc4c76e378/"},"frontmatter":{"title":"Node.jsでgetchar"}}}}}