{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/5276bd3425d1000e48ba/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"65082e16-c0f6-5d3d-914b-f8e6a646c828","excerpt":"後入りですみませんが、WebAssemblyアドベントカレンダー未投稿のところ埋めさせて頂きます。 本記事では、WebAssemblyをターゲットとするコンパイラ処理系を実装します。 方針 WebAssembly…","html":"<p>後入りですみませんが、WebAssemblyアドベントカレンダー未投稿のところ埋めさせて頂きます。</p>\n<p>本記事では、WebAssemblyをターゲットとするコンパイラ処理系を実装します。</p>\n<h1>方針</h1>\n<p>WebAssemblyへのコンパイル言語処理系を<strong><em>最も簡単に</em></strong> <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>実装するための方針は以下のとおり。</p>\n<ul>\n<li>言語は「<a href=\"https://ja.wikipedia.org/wiki/Brainfuck\">コンパイラがなるべく小さくなる言語として考案</a>」されたBrainf*ckを採用</li>\n<li>文法は<a href=\"https://ja.wikipedia.org/wiki/Parsing_Expression_Grammar\">PEG(Parsing Expression Grammar)</a>で記述し、生成系<a href=\"https://pegjs.org/\">PEG.js</a>でパーサを実行時に生成する</li>\n<li>WebAssemblyコード生成では文字列でWAST形式を生成し、<a href=\"https://github.com/ewasm/wast2wasm\">wast2wasm</a><sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>で変換する(直接WASMを生成しない)。またEmscriptenやbinaryenは使用しない</li>\n<li>WASTの表現ではflat形式ではなくs-expression形式を使用する</li>\n<li>ブラウザ上ではなくNode上で実行する。なのでWebAssemblyを実行できるバージョンのNode.jsが必要。Node8以降では普通に実行できる</li>\n</ul>\n<p>コードは<a href=\"https://github.com/uehaj/bf-compiler-webassembly\">こちら</a>に。\nNPMに登録されているので以下で実行できます。</p>\n<pre><code class=\"language-shell\">% cat hello.bf\n+++++++++[>++++++++>+++++++++++>+++++&#x3C;&#x3C;&#x3C;-]>.>++.+++++++..+++.>-.------------.&#x3C;++++++++.--------.+++.------.--------.>+.\n\n% npx bf-compiler-webassembly hello.bf\nnpx: 5個のパッケージを1.592秒でインストールしました。\nHello, world!\n\n% npx bf-compiler-webassembly -e '+++++++++[>++++++++>+++++++++++>+++++&#x3C;&#x3C;&#x3C;-]>.>++.+++++++..+++.>-.------------.&#x3C;++++++++.--------.+++.------.--------.>+.'\nnpx: 5個のパッケージを2.06秒でインストールしました。\nHello, world!\n\n% npx bf-compiler-webassembly --help\nnpx: 5個のパッケージを1.506秒でインストールしました。\n\n  Usage: bf-compiler-webassembly [options] [file...]\n\n\n  Options:\n\n    -V, --version         output the version number\n    -e,--script [script]  run script from command line\n    -v,--verbose          verbose output\n    -h, --help            output usage information\n\n\n  Examples:\n\n    $ npx bf-compiler-webassembly -e \"+++\"\n    $ npx bf-compiler-webassembly hello.bf\n</code></pre>\n<h1>実行例</h1>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/d79db6b1-f1ba-f816-b6ea-7f5481a650b3.gif\" alt=\"bf2.mov.gif\"></p>\n<p>以降、コードの説明をしていきます。</p>\n<h1>全体の流れ</h1>\n<pre><code class=\"language-js:driver.js\">// compile from string\nasync function compileAndRunString(bfSource, opts) {\n  const bfAst = bfParser.parse(bfSource, opts);\n  const wast = bfCompiler.compile(bfAst, opts);\n  const wasm = await wast2wasm.convert(wast, opts);\n  return await wasmRuner.run(wasm, opts);\n}\n</code></pre>\n<p><a href=\"https://github.com/uehaj/bf-compiler-webassembly/blob/master/lib/driver.js\">driver.js</a>でコンパイル・実行の全体の流れを制御しています。以下の順で処理が実行されます。</p>\n<ol>\n<li>Brainf*ckコードの構文解析(パース)、ASTの生成。(<a href=\"https://github.com/uehaj/bf-compiler-webassembly/blob/master/lib/bfParser.js\">bfParser.parse()</a>)</li>\n<li>ASTをwastに変換する(コード生成)。(<a href=\"https://github.com/uehaj/bf-compiler-webassembly/blob/master/lib/bfCompiler.js\">bfCompiler.compile()</a>)</li>\n<li>wast形式をwasmに変換し、WASMのバイト列表現に変換。(<a href=\"https://github.com/uehaj/bf-compiler-webassembly/blob/master/lib/wast2wasm.js\">wast2wasm.convert()</a>)</li>\n<li>WASMバイト列をWebAssemblyの内部形式(機械語?)に変換・コンパイルし、wasmコードを呼び出して実行する。(<a href=\"https://github.com/uehaj/bf-compiler-webassembly/blob/master/lib/wasmRunner.js\">wasmRunner.run()</a>)</li>\n</ol>\n<p>それぞれ以下のように処理ごとにモジュール化しています。</p>\n<pre><code class=\"language-js:driver.js\">const bfParser = require('./bfParser');\nconst bfCompiler = require('./bfCompiler');\nconst wast2wasm = require('./wast2wasm');\nconst wasmRuner = require('./wasmRunner');\n</code></pre>\n<h1>パーサ</h1>\n<p>rainf*ckを構文解析してASTを生成するパーサをPEG.jsで作成します。</p>\n<pre><code class=\"language-js:bfParser.js\">const peg = require('pegjs');\n\nconst syntax = `\ncode = (normal_insn / block_insn / otherchar) *\n\nnormal_insn = ch:[>&#x3C;+-.,] { return ch }\nblock_insn = '[' brk:block ']' { return brk  }\n\nblock = cod:code {\n  return cod;\n}\n\notherchar = [^>&#x3C;+-.,\\\\[\\\\]] {\n  return undefined\n}\n`;\n\nconst parser = peg.generate(syntax);\n</code></pre>\n<p>syntaxという文字列変数にPEG文法を与えてpeg.generate()でパーサを生成しています。\nPEGでBNFのように構文を表現します。PEGでは構文解析と字句解析を分ける必要がありません。</p>\n<pre><code class=\"language-js:bfParser.js\">function parse(bfSource, opts) {\n  const bfAst = parser.parse(bfSource);\n  return bfAst;\n}\n</code></pre>\n<p>生成したパーサにBrainf*ckのコードを与えて抽象構文木を返します。\nPEGのJS実装であるPEG.jsが生成するパーサは、JSONで抽象構文木を返してくれます。\n抽象構文木(という程のものでもありませんが)では、[と]で表現されるブロックは配列、それ以外はその文字の配列が返ります。</p>\n<pre><code class=\"language-brainfuck\">,[->+&#x3C;]>+.\n</code></pre>\n<p>であれば、以下のようなJSONが返ります。</p>\n<pre><code class=\"language-json\">[ ',', [ '-', '>', '+', '&#x3C;' ], '>', '+', '.' ]\n</code></pre>\n<p>[と]の対応は静的にコンパイル時チェックされることになります。</p>\n<h1>コード生成</h1>\n<p>抽象構文木を再帰的に辿って<a href=\"https://ukyo.github.io/wasm-usui-book/webroot/text-format.html\">WAST形式テキスト</a>を生成します。\n先のBFコードは以下を生成します。</p>\n<pre><code class=\"language-lisp\">(module\n  (func $getchar (import \"imports\" \"getchar\") (result i32))\n  (func $putchar (import \"imports\" \"putchar\") (param i32))\n  (memory $0 (export \"memory\") 1 1)\n\n  (func (export \"main\") (local $ptr i32)\n    (i32.store8 (get_local $ptr) (call $getchar)) ;; ,\n    (block ;; [\n      (loop\n        (br_if 1 (i32.eqz (i32.load8_s (get_local $ptr))))\n        (i32.store8 (get_local $ptr) (i32.sub (i32.load8_s (get_local $ptr)) (i32.const 1))) ;; -\n        (set_local $ptr (i32.add (get_local $ptr) (i32.const 1))) ;; >\n        (i32.store8 (get_local $ptr) (i32.add (i32.load8_s (get_local $ptr)) (i32.const 1))) ;; +\n        (set_local $ptr (i32.sub (get_local $ptr) (i32.const 1))) ;; &#x3C;\n        (br 0)\n      )\n    ) ;; ]\n    (set_local $ptr (i32.add (get_local $ptr) (i32.const 1))) ;; >\n    (i32.store8 (get_local $ptr) (i32.add (i32.load8_s (get_local $ptr)) (i32.const 1))) ;; +\n    (i32.load8_s (get_local $ptr)) (call $putchar) ;; .\n  )\n)\n</code></pre>\n<h1>生成コードの説明</h1>\n<h2>冒頭のいくつかの宣言</h2>\n<pre><code>  (func $getchar (import \"imports\" \"getchar\") (result i32))\n  (func $putchar (import \"imports\" \"putchar\") (param i32))\n</code></pre>\n<p>BFでの入出力を行うためのgetchar、putcharを外部JS関数として供給します。</p>\n<pre><code>  (memory $0 (export \"memory\") 1 1)\n</code></pre>\n<p>memoryでWebAssemby側でメモリ領域を<a href=\"https://github.com/sunfishcode/wasm-reference-manual/blob/master/WebAssembly.md#linear-memories\">リニアメモリ</a>として確保。サイズと最大サイズをブロックサイズで指定。ここではいずれも1ブロック(64 KiB)を指定。</p>\n<h2>コード本体の定義</h2>\n<pre><code>  (func (export \"main\") (local $ptr i32)\n</code></pre>\n<p>JSから呼べる関数としてWebAssembly関数をmainという名前でexport。</p>\n<p>以降、関数本体となる実行命令の説明をしていきます。</p>\n<h2>’[‘と’]‘に対応するコード</h2>\n<pre><code>    (block ;; [\n      (loop\n        (br_if 1 (i32.eqz (i32.load8_s (get_local $ptr))))\n:\n        (br 0)\n      )\n    ) ;; ]\n</code></pre>\n<p>whileループに相当する[〜]のブロックがコンパイルされたコード。ptrの内容がゼロならループを抜け<code>(br_if 1)</code>、loop末尾でloopの先頭にジャンプ<code>(br 0)</code>しています。brはbranchの略で、分岐もしくは条件付き分岐命令です。\nwast2wasmではなぜかbrの飛び先をラベルで指定できなかったので、ネストレベルの相対指定<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>で飛び先を指定しています。「0」は最内周のloopもしくはblock、「1」は1段外側のレベルのloopもしくはblockを意味します。ラベルを管理する必要がないので、ここでは好都合です。</p>\n<p>brやbr_ifのジャンプの動作は、指定したネストレベルに対応するものがloopであればloop冒頭にジャンプ(ここではwhileループ内でのcontinue文の動作)、blockであればblockの末尾にジャンプ(ここではwhileループのbreak)をします。</p>\n<h2>’+‘と’-‘に対応するコード</h2>\n<pre><code>(i32.store8 (get_local $ptr) (i32.add (i32.load8_s (get_local $ptr)) (i32.const 1))) ;; +\n(i32.store8 (get_local $ptr) (i32.sub (i32.load8_s (get_local $ptr)) (i32.const 1))) ;; -\n</code></pre>\n<p>$ptrで間接参照したリニアメモリの指す先の内容を1バイトloadして加減算してリニアメモリにstoreし戻します。i32.load8は拡幅になるので符号付きと無しがあり、この場合は符号付きで処理するように注意します。</p>\n<h2>’>‘と’&#x3C;‘に対応するコード</h2>\n<pre><code>(set_local $ptr (i32.add (get_local $ptr) (i32.const 1))) ;; >\n(set_local $ptr (i32.sub (get_local $ptr) (i32.const 1))) ;; &#x3C;\n</code></pre>\n<p>$ptrを増減させます。</p>\n<h2>’.‘と’,‘に対応するコード</h2>\n<pre><code>(i32.load8_s (get_local $ptr)) (call $putchar) ;; .\n(i32.store8 (get_local $ptr) (call $getchar)) ;; ,\n</code></pre>\n<p>importsで宣言されているJS関数を指定して呼び出します。ここで用意したのはいずれも同期的な関数です。非同期関数を呼ぶ際にはコールバック関数を指定する必要がありますが、ここでは簡単さを優先するために同期関数で以下のように実装しておいたものを呼び出しています。</p>\n<pre><code class=\"language-js:wasmRunner.js\">const readlineSync = require('readline-sync');\n :\nfunction putchar(ch) {\n  process.stdout.write(String.fromCharCode(ch));\n}\n\nlet buf = '';\nfunction getchar() {\n  if (buf === '') {\n    buf = buf + readlineSync.question() + '\\n';\n  }\n  const result = buf.charCodeAt(0);\n  buf = buf.substring(1);\n  return result;\n}\n</code></pre>\n<h1>WAST→WASM変換</h1>\n<pre><code class=\"language-wast2wasm.js\">const wast2wasm = require('wast2wasm');\n\nasync function convert(wasmTextCode, opts) {\n  const wasm = await wast2wasm(wasmTextCode, true);\n  if (opts.verbose || process.env.NODE_ENV === 'debug') {\n    console.log(wasm.log);\n  }\n  return wasm.buffer;\n}\n</code></pre>\n<p>wastをwasmのバイト列表現に変換します。</p>\n<h1>実行</h1>\n<pre><code class=\"language-js:wastRunner.js\">async function run(uint8array, opts) {\n  const wasm = await WebAssembly.instantiate(uint8array, {\n    imports: {\n      getchar,\n      putchar,\n    },\n  });\n\n  const result = wasm.instance.exports.main();\n  if (opts.verbose || process.env.NODE_ENV === 'debug') {\n    const memory = new Uint8Array(wasm.instance.exports.memory.buffer);\n    console.log(memory);\n  }\n  return result;\n}\n</code></pre>\n<p>受け取ったwasmのバイト列表現をWebAssembly.instantiate()で実際のコンパイルを行い、WebAssemblyインスタンスを生成します。通常のWebAssembly実行であれば、wasm生成までは事前コンパイルでできていて、wasmのロードから始まるところ。\nそして、exportされた関数(ここではmainで固定)を実行します。</p>\n<h1>コマンドラインの処理</h1>\n<p><a href=\"https://www.npmjs.com/package/commander\">commander</a>を使用して簡潔に。</p>\n<pre><code class=\"language-js:index.js\">const program = require('commander');\nconst driver = require('../lib/driver');\n\nfunction main(argv) {\n  program\n    .version('0.1.0')\n    .option('-e,--script [script]', 'run script from command line')\n    .option('-v,--verbose', 'verbose output')\n    .arguments('[file...]', 'Brainf*ck file')\n    .action(function(files, opts) {\n      for (const file of files) {\n        driver\n          .compileAndRunFile(file, { verbose: opts.verbose })\n          .catch(e => console.log('error:' + e));\n      }\n    })\n    .on('--help', function() {\n      console.log(`\n      \n  Examples:\n\n    $ npx bf-compiler-webassembly -e \"+++\"\n    $ npx bf-compiler-webassembly hello.bf\n\n`);\n    })\n    .parse(argv);\n\n  // for -e,--script option\n  if (program.script) {\n    driver\n      .compileAndRunString(program.script, { verbose: program.verbose })\n      .catch(e => console.log('error:' + e));\n  } else {\n    program.args.length !== 0 || program.help();\n  }\n}\n\nmain(process.argv);\n</code></pre>\n<h1>WASM所感</h1>\n<p>スタックマシンで変数も使え命令の対称性も高くわかりやすい。JVMのようにクラスベースではなく関数ベースであることが様々な効果を発揮しすっきりしている。\n呼び出しスタックを(引数やローカル変数を通じないで)直接見ることも書くこともできないのでスタック上をバッファオーバーフローで書き壊したり、リターンアドレス書き換えてコード呼び出される攻撃について安全。ヒープは別問題だが、間接参照呼び出しはtableという構造のインデックスのみで実現されるので列挙される関数の範囲に限定されるので比較的安全。引数や返り値の型や個数を指定する必要があり、軽くバイトコードベリファイがなされスタックズレなどは防止される。</p>\n<h1>WAST形式所感</h1>\n<p>WAST形式のS-expressionはLispっぽいですが、バイナリフォーマットとしてのWASMでの実際のバイト配置としてはFORTHのような逆ポーランド記法であり、これに対応するflat形式という記法もあるそうです(併用もできる?)。引数の評価順が決まっているのでS-Expressionとflat形式は1対1対応です。</p>\n<h1>最適化</h1>\n<p>していませんが、本来なら種々の最適化を実行することができるでしょう。たとえば複数連続する+や-、>や&#x3C;をまとめて計算するなどは効果的だろうし、BFの個々の命令をテーブルジャンプとか間接参照にすることも考えられます。</p>\n<h1>まとめ</h1>\n<ul>\n<li>WebAssemblyはコンパイラの勉強のターゲットとしてモチベーションが高まるし、しきいも低いのでぜひどうぞ。</li>\n<li>ただし現時点ではドキュメント不足、今後仕様が変化していくだろう、という予測もできます。</li>\n<li>PEG.jsは便利。</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>主観です。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>wast2wabtはたぶん<a href=\"https://github.com/WebAssembly/wabt\">WABT(The WebAssembly Binary Toolkit)</a>からEmscriptenか何かでJSに変換されている。</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>ネストレベルの外側向きの相対指定であることがドキュメント上読み取れず、ものすごく苦労した。</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"WebAssemblyへのコンパイラ言語を簡単に実装","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/blog/5276bd3425d1000e48ba/","previous":{"fields":{"slug":"/blog/5d9fec1ba6cc4c76e378/"},"frontmatter":{"title":"Node.jsでgetchar"}},"next":{"fields":{"slug":"/blog/5cd1e9a1ea3d451e784e/"},"frontmatter":{"title":"Grails3で、Grails2と同様に設定ファイルを外部化する"}}}}}