{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/5cd1e9a1ea3d451e784e/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"d2868ba6-32c3-56ea-82ad-ab1ecf1f79cc","excerpt":"Grails 2ではGrails自身が実装していた設定ファイルの外部化は、Grails 3ではSpring Bootにまかされることになりました。 本記事では、Grails 2までの設定ファイル外部化となるべく似たような動作をするようにGrails…","html":"<p>Grails 2ではGrails自身が実装していた設定ファイルの外部化は、Grails 3ではSpring Bootにまかされることになりました。</p>\n<p>本記事では、Grails 2までの設定ファイル外部化となるべく似たような動作をするようにGrails 3設定してみます。</p>\n<p>やることは、Applicationクラス(grails-app/init/hoge/Application.groovy)に以下のようにアノテーションを付与することだけです。</p>\n<pre><code class=\"language-groovy\">import org.springframework.context.annotation.*\n\n@PropertySources([\n  @PropertySource(value=\"classpath:hoge.properties\"),\n  @PropertySource(value=\"file:///opt/hoge/conf/hoge.properties\", ignoreResourceNotFound = true),\n  @PropertySource(value='file:///${hoge.conf.file}', ignoreResourceNotFound = true)\n])\nclass Application extends GrailsAutoConfiguration {\n    static void main(String[] args) {\n  :\n</code></pre>\n<p>上記によって以下のように動作します。</p>\n<ul>\n<li>(1) warファイルやクラスパス中のhoge.properties(ソースコードとしてはsrc/main/resouces/hoge.propertiesに置く)を読み込む。このファイル中には設定のデフォルト値を記入しておく。</li>\n<li>(2) もしファイル「file:///opt/hoge/conf/hoge.properties」があれば設定ファイルとしてそれを読み込む。(1)で設定されたプロパティで同名のものは上書きされる。なければ何もしない。</li>\n<li>(3) もし、システムプロパティ「hoge.conf.file」もしくは環境変数「HOGE<em>CONF</em>FILE」で指定されたファイル名のファイルががあればそれを読み込む。(1)(2)で設定されたプロパティで同名のものは上書きされる。なければ何もしない。</li>\n</ul>\n<p>run-app時、およびwar化してtomcatにデプロイしても同様に動作します。\nちなみに上記はSpring Bootの機能というだけです。(<a href=\"https://www.jayway.com/2014/02/16/spring-propertysource/\">→参考</a>)</p>\n<h1>余談</h1>\n<p>Spring Boot標準の設定ファイルの外部化の説明は<a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html\">こちら</a>にありますが、非常に高機能かつ汎用的です。Spring Bootの主たる設定ファイルapplication.yaml(application.properties)は、特に何も設定しなくてもシステムプロパティspring.config.location(もしくは環境変数SPRING<em>CONFIG</em>LOCATION、etc)で切り替えることができます。その場合、<a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-profile-specific-properties\">Profile-specific application properties</a>というものに応じてファイル名を選択する、なども可能です。(Seasar2の<a href=\"http://s2container.seasar.org/2.4/ja/DIContainer.html#ConditionalInclude\">「暗黙的な条件インクルード」</a>と似た機能)</p>\n<p>ただ、spring.config.location方式だと、ベース名(デフォルトでappliction.yamlの「application」)を変更したい場合については、別のシステムプロパティ(spring.config.name)などの設定が必要になり、その設定は設定ファイルに書けない以上、環境変数やシステムプロパティで指定するしかなく、「環境変数やシステムプロパティを指定しない」ときにapplicationから読み込もうとしてしまう、という問題があり、Grails 2までの動作と上手く整合する方法をみつけられませんでした。</p>\n<p>もし、外部化する設定ファイルのファイル名がapplication.yaml(.properties)のままで良いのであれば、あるいはシステムプロパティや環境変数の設定が必須であるような運用ルールとするならば、spring.config.locationを使う方式でも良いかもしれません。その場合、特に設定はいりません。</p>","frontmatter":{"title":"Grails3で、Grails2と同様に設定ファイルを外部化する","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/blog/5cd1e9a1ea3d451e784e/","previous":{"fields":{"slug":"/blog/5d9fec1ba6cc4c76e378/"},"frontmatter":{"title":"Node.jsでgetchar"}},"next":{"fields":{"slug":"/blog/48cb682cc3441f1066a3/"},"frontmatter":{"title":"第14回オフラインリアルタイムどう書くの参考問題をHaskellで解く"}}}}}