{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/f91d68ea4ef8450fc45c/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"8e96da25-14f0-5bee-a069-ae9c0b3b36bd","excerpt":"React-Reduxの公式から「Redux Starter Kit」というものが公開されています。 これがなにかといえば、私の理解するかぎり以下です。 React-Redux…","html":"<table>\n<tr><td>Redux Sterter KitはRedux-Toolkitに名称変更されてAPIも変更されています。本記事はそのままでは最新版redux-toolkitとして動作しません。\nhttps://github.com/reduxjs/redux-toolkit</td></tr>\n<table>\n#はじめに\n<p>React-Reduxの公式から「<a href=\"https://redux-starter-kit.js.org/\">Redux Starter Kit</a>」というものが公開されています。</p>\n<p>これがなにかといえば、私の理解するかぎり以下です。</p>\n<blockquote>\n<p>React-Reduxまわりのベストプラクティス、定番拡張、定番併用ライブラリ、定番ミドルウェアを、簡単に組込むための簡単で軽めのライブラリ、メタパッケージ。</p>\n</blockquote>\n<p>CLIコマンドではなくライブラリです。\nこれは良いものだと思いましたので全力でお勧めしていきます。</p>\n<h1>特徴</h1>\n<ul>\n<li>TypeScriptフル対応。当然ですね。</li>\n<li>React Redux 7.1対応、つまりHooks対応。これからはHooksで生きていく。Hooksの無い人生は考えられない。</li>\n<li>\n<p><a href=\"https://github.com/immerjs/immer\">Immer</a>が組込まれることで、<a href=\"https://redux-starter-kit.js.org/api/createreducer#direct-state-mutation\">直接state変更</a>可能になり、reducer記述が簡潔になる。これはイイ! 一番の推しポイントかもしれない。MobXの利点を一部とりこんだと言えるのかも??(追記、後で知ったのですが、MobxとImmerの作者は同じ) Reduxが冗長? 昔の話です。🎉🎉🎉🎉</p>\n<ul>\n<li>Immutable.jsとくらべてImmerのいいところは、Immutable.jsのように記述が特殊にならないことが一つと、他に、同じぐらい重要なのは、他の箇所にImmutable.jsの要求するデータ構造を感染させていかないこと。非侵襲的。重要。</li>\n</ul>\n</li>\n<li>\n<p>Sliceなるものでモジュール化できる。</p>\n<ul>\n<li>Sliceは<a href=\"https://redux.js.org/faq/code-structure#what-should-my-file-structure-look-like-how-should-i-group-my-action-creators-and-reducers-in-my-project-where-should-my-selectors-go\">Redux Ducks</a>が提供するものと<a href=\"https://redux-starter-kit.js.org/api/createslice#return-value\">似た</a>モジュール概念。同じではないらしい。</li>\n<li>Sliceは以下を束ねたもの。</li>\n<li>Redux Stateのトップレベルのslice。ただしこれはオプショナルで、sliceにわけないこともできる。</li>\n<li>それぞれごとの、combineReducerでまとめる元となるそれぞれのReducer群</li>\n<li>sliceごとのState初期値</li>\n</ul>\n</li>\n<li>\n<p>Sliceからaction creatorは<strong><em>型付き</em></strong>で自動生成される🎉🎉🎉🎉</p>\n<ul>\n<li>ACTION定義は完全に消える。action定数も。creatorも。1行も。一行もだ。Reduxが冗長? 昔の話です。🎉🎉🎉🎉</li>\n</ul>\n</li>\n<li>\n<p>これはReact-Reduxの機能の良さからだが、</p>\n<ul>\n<li>useSelector呼び出すhookをslice Module側で定義すれば、もうほんとにstateとりだしは楽です。</li>\n</ul>\n</li>\n<li>デフォルトで今は「[immutableStateInvariant, thunk, serializableStateInvariant]の<a href=\"https://redux-starter-kit.js.org/api/getdefaultmiddleware#development\">ミドルウェアが設定される</a>。thunkは議論あるでしょうが、使わないことももちろん可能。</li>\n<li>Redux DevToolsの設定がデフォルトで入っている。</li>\n<li>\n<p>上記のようなことのワイアリングが1パッケージでできる。🎉🎉🎉🎉</p>\n<ul>\n<li><a href=\"https://redux-starter-kit.js.org/usage/usage-guide#manual-store-setup\">configureStoreまわりのmiddlewareEnhancerとかapplyMiddlewareとかcomposedEnhancersとかのごちゃごちゃした難しいところ</a>が<a href=\"https://redux-starter-kit.js.org/usage/usage-guide#simplifying-store-setup-with-configurestore\">スッキリ</a>できる。</li>\n</ul>\n</li>\n</ul>\n<p>上記はこれだけでも素晴らしいと思うのですが、さらに公式から、というのが安心感があって良いです。この形のReduxがデファクトスタンダードと扱われるようになることを期待します。</p>\n<h1>コード例</h1>\n<p>まずは、TodoMVCみたいなものを作るとします。そのときのタスクリストをredux stateとしてあつかうとします。そのためにTodoをあつかうためのモジュールをこんな風に定義します。</p>\n<pre><code class=\"language-typescript:todoModule.ts\">import { createSlice } from \"redux-starter-kit\";\nimport { useSelector } from \"react-redux\";\n\nexport type TodoItem = {\n    title: string;\n    completed: boolean;\n    key: string;\n}\n// createSlice() で actions と reducers を一気に生成\nconst todoModule = createSlice({\n    // slice: \"todo\",\n    initialState: [] as TodoItem[],\n    reducers: {\n        addTodo: (state, action: { payload: TodoItem }) => {\n            state.push(action.payload)\n        },\n        removeTodo: (state, action: { payload: string }) => {\n            return state.filter((item) => item.key !== action.payload);\n        },\n        setCompleted: (state, action: { payload: { completed: boolean, key: string } }) => {\n            state.forEach((item) => {\n                if (item.key === action.payload.key) {\n                    item.completed = action.payload.completed;\n                }\n            });\n        },\n    }\n});\n\nexport const useTodoItems = () => {\n    return useSelector((state: ReturnType&#x3C;typeof todoModule.reducer>) => state);\n}\n// 他に便利なuseSelect呼び出しや、粒度の細かいaction creatorのexportをここに追加していってもいい。\n\nexport default todoModule;\n</code></pre>\n<p>Immerのおかげで、reducerが劇的に簡潔になってます。stateをまるごとおきかえるときはreturnで返します。あとは代入などで副作用バリバリで書いてますがProxy経由なので実際にはStateを変更していません。</p>\n<p>上ではcombineReducerも使わないという前提でsliceプロパティは定義してません。もちろん規模が大きくなれば使ってもかまいません。使ったとしてもsliceの存在は最後のuseTodoItemsで隠蔽できます。\nちなみに、dispatchでまるごと公開するのは楽とはいえ粗い、という人は、<a href=\"https://redux-starter-kit.js.org/usage/usage-guide#exporting-and-using-slices\">ちまちまとaction creatorを公開していくこともできます</a>。お好みで。</p>\n<p>一つだけ、この記事で独自に提案したいこととして、<strong>useSelectorの呼出は、このモジュール側でHooks(ここではuseTodoItems)として定義して、使いやすくしたものをexportする</strong>ということです。特に、useSelectorの直接呼出は型定義に関して長く煩雑になりがちで、こちらに隠蔽するメリットがあります。</p>\n<p>次に、上に含まれるreducerから以下のようにstoreを構築します。デフォルトのミドルウェアが組み込まれますが、もちろん好きなものを組みこめもします。</p>\n<pre><code class=\"language-typescript:store.ts\">import { configureStore } from \"redux-starter-kit\";\nimport todoModule from \"./modules/todoModule\";\n\nexport const setupStore = () => {\n    const store = configureStore({\n        reducer: todoModule.reducer\n    });\n    return store\n}\n</code></pre>\n<p>そのstoreから以下のようにProviderコンポーネントでアプリに組み込んで、</p>\n<pre><code class=\"language-typescript:App.tsx\">import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { setupStore } from \"./store\";\n\nconst store = setupStore();\n\nReactDOM.render(\n    &#x3C;Provider store={store}>\n        &#x3C;App />\n    &#x3C;/Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n</code></pre>\n<p>準備は完了。\nあとは、それぞれのコンポーネントからstoreの値をつかいたければ、</p>\n<pre><code class=\"language-typescript\">import { useTodoItems } from \"./modules/todoModule\";\n  :\n  const todos = useTodoItems();\n</code></pre>\n<p>actionをディスパッチしたければ、</p>\n<pre><code class=\"language-typescript\">import { useDispatch } from \"react-redux\";\nimport todoModule from \"./modules/todoModule\";\n\n  ：\n  const dispatch = useDispatch();\n\n  dispatch(todoModule.actions.addTodo({ title: \"TITLE\", completed: false, key: 'XXX' }))  \n\n  const todos = useTodoItems();\n  const todo = todos[key];\n\n  dispatch(todoModule.actions.setCompleted({ key: todo.key, completed: !todo.completed }));\n  dispatch(todoModule.actions.removeTodo(todo.key));\n</code></pre>\n<p>のように、任意のコンポーネントからも自由自在です。connect, mapStateToProps, mapDispatchToPropsよさらば。</p>\n<p>以上です。ザッツオール。ナッシングエルス。驚異的に簡単になったわけです。</p>\n<p>コンポーネント間で状態を共有する場合は、間違いなく<strong>素のuseStateでやるよりも簡単</strong>になります。あっちはImmer使えないですし<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>、stateのsetterをプロパティで取り回したりイベントハンドラとりまわすのはつらいですからね。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://qiita.com/Ouvill/items/a76e9cbce569d01f2931\">Redux の記述量多すぎなので、 Redux の公式ツールでとことん楽をする ( Redux Starter Kit)</a></li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://qiita.com/seya/items/f6d311b32cf711a02020\">こちら</a>にあるような各種Hooks(useArrayとか)を使えば、Immerに匹敵するぐらいには楽かもしれない。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Redux Starter KitでHooksとReduxを使いこなそう","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/blog/f91d68ea4ef8450fc45c/","previous":{"fields":{"slug":"/blog/ff13229413b785cd9cf8/"},"frontmatter":{"title":"関数型プログラミングを業務開発に適用するための架空の社内勉強会資料"}},"next":{"fields":{"slug":"/blog/f2c71325c9f7dc10357c/"},"frontmatter":{"title":"Visual Studio Codeでエスケープキーの代りに^[を使用する設定"}}}}}