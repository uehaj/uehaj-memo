{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/161f3c943faf35c6aefc/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"4c61eacb-d1de-54a9-b31e-a675634e2afa","excerpt":"TAPL本(Types And Programming Language、型システム入門)の各章にある「ML実装」の例をRustにポーティングしてみるシリーズ、「7章のラムダ計算のML実装」です。…","html":"<p><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274069117/uehaj-22/ref=nosim/\">TAPL本(Types And Programming Language、型システム入門)</a>の各章にある「ML実装」の例をRustにポーティングしてみるシリーズ、「7章のラムダ計算のML実装」です。<a href=\"http://qiita.com/uehaj/items/1ac71855d05132d54eb8\">4章の</a>に比べるといきなり難易度が上がります。全体からしたら序の口でしょうが。</p>\n<h1>説明</h1>\n<ul>\n<li>unstableなゲート化された機能<a href=\"https://doc.rust-lang.org/book/box-syntax-and-patterns.html\">box_patterns</a>を1箇所で使用しているので、Rust 1.0 betaではコンパイルできず、unstable機能がerrorにならないnightly版でしかコンパイルできません。趣旨からして、おそらく1.0 release版でも実行できないでしょう。でもこれを使わずに実装することができなかったのでやむなく。(<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0469-feature-gate-box-patterns.md\">参考</a>)</li>\n<li>以下でnamed.rsは、名無し項ではなく、通常の項を表現するものです。7章には指導がないが、名無し項への変換がないと余りに不便なので作りました。</li>\n<li>以下のようなλ計算が評価できます。</li>\n</ul>\n<pre><code class=\"language-rust\">     println!(\"{:?}\",\n             apply(abst(\"a\", \n                         apply(abst(\"b\",\n                                    apply(var(\"b\"), abst(\"x\", var(\"b\")))),\n                               apply(var(\"a\"), abst(\"z\", var(\"a\")))\n                               )),\n                    abst(\"w\", var(\"w\"))\n                    ).remove_names().eval());\n// 結果は(lambda w. w)\n</code></pre>\n<h1>気づいたことや工夫</h1>\n<ul>\n<li>Termのような再帰的データ構造を実現するために、enumでowned pointerを使用すると、Box::newが頻出したりして可読性が悪化するが、enumのデータ構築子をそのまま使うのではなく、以下のような、引数にTermを受けとってBox::newを実行した上でデータ構築を行うような、簡単なラッパーを作ると構築に関しては簡潔さを維持できる。ついでに&#x26;str→String変換しておく。欲を出すと、そういう関数群を自動的deriveしてくれるようなTraitがあればいいのに。 </li>\n</ul>\n<pre><code>fn abst(s:&#x26;str, t:Term) -> Term {\n    Abst(s.to_string(), Box::new(t))\n}\n\nfn apply(t1:Term, t2:Term) -> Term {\n    Apply(Box::new(t1), Box::new(t2))\n}\n</code></pre>\n<ul>\n<li>de Bruijn Indexは、数学的証明との対応がしやすい以外のメリットはたぶんなく、本当のコンパイラの実装では導入しない種類のものと思われる。まあ変数名集合の集合操作でやるよりはプログラムっぽいが。</li>\n<li>何度も言うがrustのパターンマッチは難しい気がする。&#x26;,mut,ref,box,などがやっかいにしている。もっとドキュメントもしくは経験が必要だ。</li>\n<li>RustではHaskellやMLのように入れ子になった関数で親をアクセスするものは定義できないらしい(<a href=\"http://stackoverflow.com/questions/26685666/a-local-function-in-rust\">参考</a>)。Closure使えばいいのだろうが、再帰呼び出しするClosureはきれいには定義できない(<a href=\"http://stackoverflow.com/questions/16946888/recursive-closure-in-rust\">参考</a>)。</li>\n<li>環境変数RUST<em>BACKTRACEを1にするとpanic!時などにスタックトレースが表示される。`<code></code>env RUST</em>BACKTRACE=1 cargo test`<code></code> みたいに使うとよろし。</li>\n</ul>\n<pre><code class=\"language-rust:nameless.rs\">// http://www.cis.upenn.edu/~bcpierce/tapl/checkers/untyped/\n#![allow(dead_code)]\n#![allow(unused_variables)]\n#![allow(unused_imports)]\n\nuse std::fmt::Debug;\nuse std::fmt::Formatter;\nuse std::fmt::Error;\n\n#[derive(Clone,PartialEq)]\npub enum Term {\n    // Single Varialbe\n    Var(isize, // de Bruijn Index.\n        usize), // length of Context where this variable appealed.\n    // Abstraction\n    Abst(String, // lambda variable name\n         Box&#x3C;Term>), // lambda body\n    // Application\n    Apply(Box&#x3C;Term>, // function\n          Box&#x3C;Term>) // argument\n}\n\n#[derive(Debug,Clone)]\npub enum Binding {\n    NameBind\n}\n\npub type Context = Vec&#x3C;(String, Binding)>;\n\nfn index2name(ctx: &#x26;Context, idx: isize) -> String {\n    if idx > ctx.len() as isize-1 {\n        return format!(\"fv{}\", idx)\n    }\n    ctx[(ctx.len() as isize-idx-1) as usize].0.to_string()\n}\n\nuse nameless::Term::*;\n\npub fn add_name(ctx:&#x26;Context, name:&#x26;String) -> Context {\n    let mut new_ctx = ctx.clone();\n    new_ctx.push((name.clone(), Binding::NameBind));\n    new_ctx\n}\n\nfn pick_fresh_name(ctx:&#x26;Context, x:&#x26;String) -> (Context, String) {\n    if ctx.iter().any(|&#x26;(ref var_name,_)|{*var_name==*x}) {\n        //名前xがctxに存在(重複)していたら、新規名称に変更して再トライ\n        pick_fresh_name(ctx, &#x26;format!(\"{}'\", x))\n    }\n    else { // 重複しない名前を得たら\n        // ctxにその名前を登録して、(ctx,その名前)を返す。\n        (add_name(ctx, x), x.clone())\n    }\n}\n\nfn print_term(ctx:&#x26;Context, t:&#x26;Term) -> String {\n    match *t {\n        Abst(ref var_name, ref t1) => {\n            // λ var_name . t1 は、var_nameを環境ctxでユニークであるx_にした上で、\n            // x_をctxに登録しそのx_を登録したctx(ctx_)の元で、t1を表示する。\n            let (ctx_, x_) = pick_fresh_name(ctx, var_name);\n            format!(\"(lambda {}. {})\", x_, print_term(&#x26;ctx_, &#x26;t1))\n        },\n        Apply(ref t1, ref t2) => {\n            format!(\"({} {})\", print_term(ctx, &#x26;t1), print_term(ctx, &#x26;t2))\n        },\n        Var(x, n) => {\n            if ctx.len() == n {\n                format!(\"{}\", index2name(ctx, x))\n            } else {\n                format!(\"[bad index, ctx.len={}, n={}]\", ctx.len(), n).to_string()\n            }\n        }\n    }\n}\n\nimpl Debug for Term {\n    fn fmt(&#x26;self, fmt:&#x26;mut Formatter) -> Result&#x3C;(), Error> {\n        fmt.write_str(&#x26;format!(\"{}\", print_term(&#x26;vec![], self)))\n    }\n}\n\nfn term_shift(d:isize, t:&#x26;Term) -> Term {\n    fn term_shift_helper(c:isize, d:isize, t:&#x26;Term) -> Term {\n        match *t {\n            Var(x, n) =>\n                if x >= c { Var(x+d, (n as isize + d) as usize) }\n                else { Var(x, (n as isize + d) as usize) },\n            Abst(ref x, ref t1) =>\n                Abst(x.clone(), Box::new(term_shift_helper(c+1, d, &#x26;t1))),\n            Apply(ref t1, ref t2) =>\n                Apply(Box::new(term_shift_helper(c, d, t1)), Box::new(term_shift_helper(c, d, t2)))\n        }\n    }\n\n    term_shift_helper(0, d, t)\n}\n\nfn term_subst(j:isize, s:&#x26;Term, t:&#x26;Term) -> Term {\n    fn term_subst_helper(j:isize, s:&#x26;Term, c:isize, t:&#x26;Term) -> Term {\n        match *t {\n            Var(x, n) =>\n                if x == j+c { term_shift(c, s) } else { Var(x, n) },\n            Abst(ref x, ref t1) =>\n                Abst(x.clone(), Box::new(term_subst_helper(j, s, c+1, t1))),\n            Apply(ref t1, ref t2) =>\n                Apply(Box::new(term_subst_helper(j, s, c, t1)), Box::new(term_subst_helper(j, s, c, t2)))\n        }\n    }\n    term_subst_helper(j, s, 0, t)\n}\n\nfn term_subst_top(s:&#x26;Term, t:&#x26;Term) -> Term {\n    // Apply(Abst(x, t12), v2@Abst(_,_))\n    //\n    //                        -1        1\n    // (λ.t12) v2    →    ↑   ([0→↑  (v2)] t12)\n    //\n    // 「Apply(Abst(x, t12), v2@Abst(_,_))」の評価は、t12が使用して\n    // いる変数x(de Bruijn index=0)をv2で置換するということである\n    // (β簡約)。しかし、v2も(de Bruijn index 0)を参照している可能\n    // 性があるので、単なる置換はできない。そのためには、v2の(de\n    // Bruijn index 0)を(de Bruijn index 1)にする必要がある。さらに、\n    // v2はもともと(de Bruijn index 1)を使用しているかもしれないの\n    // で、0→1、1→2、2→3...というようにv2で使用している変数すべ\n    // ての玉つきでの増加が必要。これが内側のシフト操作\n    //      1\n    // 0→↑  (v2) \n    // の意味である。\n    // 上記より、無事v2から(de Bruijn index 0)を消去できたとして、\n    // λの中にあったt12を、λ取ってその外側の中で通用する値として\n    // 機能させるには、ネストレベルを一個浅くする必要がある。これが\n    // 外側の\n    //   -1\n    // ↑\n    // の操作である。これが意味するのは最内周の変数(de Bruijn\n    // index 0)の削除であり、de Bruijn index 1以上の変数をそれぞれ\n    // 1個インデックスが減るようにずらす。t12の(de Bruijn index 0)\n    // をv2で置換した結果には、(de Bruijn index 0)は(置換されている\n    // ので)もう存在していないので、これは安全に実行できる。\n    term_shift(-1, &#x26;term_subst(0, &#x26;term_shift(1, s), t))\n}\n\nfn is_val(t: &#x26;Term) -> bool {\n    match *t {\n        Abst(_,_) => true,\n        _ => false\n    }\n}\n\nfn eval1(ctx:&#x26;Context, t:&#x26;Term) -> Option&#x3C;Term> {\n    match t {\n        &#x26;Apply(box Abst(ref x, box ref t12), ref v2) if is_val(v2) => {\n            Some(term_subst_top(v2, &#x26;t12))\n        },\n        // Apply(v1@Abst(_,_), t2)\n        // (λ _._) t2\n        &#x26;Apply(ref v1, ref t2) if is_val(v1) => {\n            match eval1(ctx, t2) {\n                Some(t2_) => {\n                    // (λ _._) t2_\n                    Some(Apply(v1.clone(), Box::new(t2_)))\n                },\n                None => None\n            }\n        },\n        // Apply(t1, t2)\n        &#x26;Apply(ref t1, ref t2) => {\n            match eval1(ctx, &#x26;t1) {\n                Some(t1_) => Some(Apply(Box::new(t1_), t2.clone())),\n                None => None\n            }\n        },\n        _ => None\n    }\n}\n\nfn eval(ctx:&#x26;Context, t:&#x26;Term) -> Term {\n    match eval1(ctx, &#x26;t) {\n        Some(x) => x.eval(),\n        None => t.clone()\n    }\n}\n\nimpl Term {\n    pub fn eval(&#x26;self) -> Term {\n        eval(&#x26;vec![], self)\n    }\n}\n\nfn abst(s:&#x26;str, t:Term) -> Term {\n    Abst(s.to_string(), Box::new(t))\n}\n\nfn apply(t1:Term, t2:Term) -> Term {\n    Apply(Box::new(t1), Box::new(t2))\n}\n</code></pre>\n<p>テストコードを含めたものは<a href=\"https://gist.github.com/uehaj/07a2f4856a2c51df4e1f\">こちらのgist</a>にあります。</p>","frontmatter":{"title":"TaPLのML実装をRustでやってみるシリーズ「7章 ラムダ計算のML実装」","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/blog/161f3c943faf35c6aefc/","previous":{"fields":{"slug":"/blog/1b7f0a86596353587466/"},"frontmatter":{"title":"Reactベース静的サイトジェネレータGatsbyの真の力をお見せします"}},"next":{"fields":{"slug":"/blog/036e17f54cf623cee1a6/"},"frontmatter":{"title":"【React+TypeScript】Function Componentで省略可能propsの省略した場合の値を型安全に指定する"}}}}}