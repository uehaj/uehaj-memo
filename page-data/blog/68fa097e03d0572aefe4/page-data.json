{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/68fa097e03d0572aefe4/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"32c7ebf3-dd2b-5458-8fc8-a1dc637043e0","excerpt":"Node.jsでのBrainf*ckインタプリタ実装。PEG.js使用。\nPEG.jsの勉強に作ってみました。PEG.js便利です。JSに馴染むぞぉ〜。 BF…","html":"<p>Node.jsでのBrainf*ckインタプリタ実装。<a href=\"https://pegjs.org/\">PEG.js</a>使用。\nPEG.jsの勉強に作ってみました。PEG.js便利です。JSに馴染むぞぉ〜。</p>\n<p>BF処理系として、工夫といえば工夫なのは、ループブロック構文[と]の対応を、実行時に命令列からスキャンするのではなく、パース/AST構築の段階でシンタックスの問題として解決するところ。まあ、普通に考えればそうなるべきな話ではあるのですが。</p>\n<p>苦労したのは、1文字入力で、標準ライブラリを呼べばいいのかなと思ったら、見付けられなかったので作りました(<a href=\"https://qiita.com/uehaj/items/5d9fec1ba6cc4c76e378\">別記事</a>)。</p>\n<p>require(‘./parser’)しているところは、<a href=\"https://pegjs.org/online\">PEG.js online</a>で以下から生成させたパーサをparser.jsというファイル名でダウンロードし、同じディレクトリに保存してください。</p>\n<pre><code>code = (normal_insn / block_insn / otherchar) *\n\nnormal_insn = ch:[>&#x3C;+-.,] { return ch }\nblock_insn = '[' brk:block ']' { return brk  }\n\nblock = cod:code {\n  return cod;\n}\n\notherchar = [^>&#x3C;+-.,\\[\\]] {\n  return undefined\n}\n</code></pre>\n<p>実行例:</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/a2428b6b-bb1e-2ff6-7ed0-c25ba2286b2a.gif\" alt=\"bfjs.mov.gif\"></p>\n<p>以下、main.js</p>\n<pre><code class=\"language-js\">const readline = require('readline');\nconst rl = readline.createInterface({input:process.stdin});\nlet buf = \"\";\n\nfunction getchar() {\n  if (buf.length == 0) {\n    if (process.stdin.AtEndOfStream) {\n      return Promise.resolve(null); // EOF\n    }\n    return new Promise((resolve, reject) => {\n      rl.once('line', (line) => {\n        buf = buf + line + \"\\n\";\n        resolve(getchar());\n      });\n    });\n  } else {\n    const result = buf.charCodeAt(0);\n    buf = buf.substring(1);\n    return Promise.resolve(result);\n  }\n}\n\n/*\n  code = (normal_insn / block_insn / otherchar) *\n\n  normal_insn = ch:[>&#x3C;+-.,] { return ch }\n  block_insn = '[' brk:block ']' { return brk  }\n\n  block = cod:code {\n  return cod;\n  }\n\n  otherchar = [^>&#x3C;+-.,\\[\\]] {\n  return undefined\n  }\n*/\n// generated with PEG.js from above peg syntax.\nconst parser = require(\"./parser.js\"); \n\n\nconst source = `\n>>++++++++[->++++++++&#x3C;]>>>>+++++++++[->++++++++++&#x3C;]>[&#x3C;&#x3C;,[->+&#x3C;&#x3C;+&#x3C;&#x3C;+>>>]&#x3C;&#x3C;&#x3C;[\n->>>+&#x3C;&#x3C;&#x3C;]>>>>>[->+>>+&#x3C;&#x3C;&#x3C;]>[&#x3C;&#x3C;[->+>>+&#x3C;&#x3C;&#x3C;]>>>[-&#x3C;&#x3C;&#x3C;+>>>]&#x3C;&#x3C;[[-]&#x3C;->]>-]>>[-&#x3C;&#x3C;&#x3C;+\n>>>]&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;[-&#x3C;+&#x3C;&#x3C;+>>>]&#x3C;[>>[-&#x3C;+&#x3C;&#x3C;+>>>]&#x3C;&#x3C;&#x3C;[->>>+&#x3C;&#x3C;&#x3C;]>>[[-]>-&#x3C;]&#x3C;-]&#x3C;&#x3C;[->>>+&#x3C;&#x3C;&#x3C;\n]>>>>>&#x3C;[[-]>++++++++++++++++++++++++++++++++>[[-]&#x3C;------------------------\n-------->]&#x3C;&#x3C;]>>[-]&#x3C;.>>]`;\n\nconst ast = parser.parse(source);\n\nconst memSize = 20;\nlet ptr = 0;\nconst memory = Array(memSize).fill(0);\n\nasync function run(code, prefix) {\n  // console.log(\"run code=\",code,'mem=',memory,'ptr=',ptr);\n  for (const i of code) {\n    // console.log(\"  ins=\",i);\n    if (Array.isArray(i)) {\n      while (memory[ptr] !== 0) {\n        await run(i, prefix+\" \");\n      }\n    }\n    else if (i === '>'){\n      ptr += 1;\n    }\n    else if (i === '&#x3C;'){\n      ptr -= 1;\n    }\n    else if (i === '+'){\n      memory[ptr] += 1;\n    }\n    else if (i === '-'){\n      memory[ptr] -= 1;\n    }\n    else if (i === '.'){\n      process.stdout.write(String.fromCharCode(memory[ptr]));\n    }\n    else if (i === ','){\n      memory[ptr] = await getchar();\n    }\n  }\n}\n\nrun(ast, \"\").then(()=>{\n  console.log(memory);\n  process.exit()\n});\n</code></pre>","frontmatter":{"title":"Node.jsでPEG.jsでBrainf*ck","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/blog/68fa097e03d0572aefe4/","previous":{"fields":{"slug":"/blog/60abb9be0dfac0755dcf/"},"frontmatter":{"title":"第13回オフラインリアルタイムどう書くの問題をFregeで解く"}},"next":{"fields":{"slug":"/blog/69d1eba89ebe51af6d02/"},"frontmatter":{"title":"Dartのアイソレート間で相互通信をする例"}}}}}