{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/uehaj-memo/1ac71855d05132d54eb8/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"a027785f-01c1-5a50-b547-fb54fa73a586","excerpt":"TAPL本(Types And Programming Language、型システム入門)の各章にある「ML実装」の例をRustにポーティングしてみます。 まずは4章の算術式です。書籍でのtype termが保持するinfo…","html":"<p><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274069117/uehaj-22/ref=nosim/\">TAPL本(Types And Programming Language、型システム入門)</a>の各章にある「ML実装」の例をRustにポーティングしてみます。</p>\n<p>まずは4章の算術式です。書籍でのtype termが保持するinfoは、ソースからパージングするわけではないので略します。いらなそうなletは省きました(OCamlでの必要性は不明)。</p>\n<pre><code class=\"language-rust\">#![feature(box_patterns)]\n#![feature(box_syntax)]\n\n#[derive(Debug,Clone)]\nenum Term {\n    True,\n    False,\n    If(Box&#x3C;Term>, Box&#x3C;Term>, Box&#x3C;Term>),\n    Zero,\n    Succ(Box&#x3C;Term>),\n    Pred(Box&#x3C;Term>),\n    IsZero(Box&#x3C;Term>)\n}\n\nuse Term::*;\n\nfn is_numerical(t: &#x26;Term) -> bool {\n    match *t {\n        Zero => true,\n        Succ(box ref t1) => is_numerical(t1),\n        _ => false\n    }\n}\n\nfn is_val(t: &#x26;Term) -> bool {\n    match *t {\n        True => true,\n        False => true,\n        _ => is_numerical(t)\n    }\n}\n\nfn eval1(t: Term) -> Term {\n    match t {\n        Zero => Zero,\n        If(box True, box t2, _) => t2,\n        If(box False, _, box t3) => t3,\n        If(box t1, t2, t3) => If(box eval1(t1), t2, t3),\n        Succ(box t1) => Succ(box eval1(t1)),\n        Pred(box Zero) => Zero,\n        Pred(box Succ(box ref t1)) if is_numerical(t1) => t1.clone(),\n        Pred(box t1) => Pred(box eval1(t1)),\n        IsZero(box Zero) => True,\n        IsZero(box Succ(box ref t1)) if is_numerical(t1) => False,\n        IsZero(box t1) => IsZero(box eval1(t1)),\n        _ => panic!()\n    }\n}\n\nfn main() {\n    assert_eq!(format!(\"{:?}\", True), \"True\");\n    assert_eq!(is_numerical(&#x26;True), false);\n    assert_eq!(is_numerical(&#x26;Zero), true);\n    assert_eq!(is_val(&#x26;True), true);\n    assert_eq!(is_val(&#x26;If(box True,box True,box False)), false);\n    assert_eq!(format!(\"{:?}\", eval1(If(box True,box True,box False))), \"True\");\n    assert_eq!(format!(\"{:?}\", eval1(If(box False,box True,box False))), \"False\");\n    assert_eq!(format!(\"{:?}\", eval1(If(box IsZero(box Zero), box True, box False))), \"If(True, True, False)\");\n    assert_eq!(format!(\"{:?}\", eval1(Succ(box Succ(box Zero)))), \"Succ(Succ(Zero))\");\n    assert_eq!(format!(\"{:?}\", eval1(Pred(box Zero))), \"Zero\");\n    assert_eq!(format!(\"{:?}\", eval1(Pred(box Succ(box Zero)))), \"Zero\");\n    assert_eq!(format!(\"{:?}\", eval1(Pred(box Succ(box Zero)))), \"Zero\");\n    assert_eq!(format!(\"{:?}\", eval1(IsZero(box Zero))), \"True\");\n    assert_eq!(format!(\"{:?}\", eval1(IsZero(box Succ(box Zero)))), \"False\");\n    assert_eq!(format!(\"{:?}\", eval1(IsZero(box Pred(box Succ(box Zero))))), \"IsZero(Zero)\");\n}\n</code></pre>\n<ul>\n<li>boxを除けば、ほぼOCamlと同等。GCの無い言語としては、良い線に行っていると思う。</li>\n<li>実行メモリモデルがまさにC/C++なので、参照と値、cloneを完璧に適切に使いわける必要がある。OCaml版では全く意識する必要がない点である。この区別をてきとうにやっておけばうまく動く、ということはない。ここがGC言語との違い。</li>\n<li>もし完璧に適切に使いわけられないならば、それはコンパイルが通らないことを意味する。やりとげてみると、目から鱗の自然な形なのだが、最初わからないとつらい。根性しかない。</li>\n<li>今回の場合、match式の背後にある「暗黙の代入」、すなわちマッチ対象から各パターン、ガード、枝の本体に分配されるための代入が、それぞれムーブセマンティクスなのか、ownershipをとらない参照(&#x26;mutではない&#x26;)なのか、boxなのかrefなのかbox refなのか、そのすべてが正しく的確に指定されている必要がある。matchが展開された結果における暗黙の代入の様子を想像する力が問われる。どっかにドキュメントありますかね…。</li>\n<li>Rustにおけるデータ管理は、「値」が基本になる、というのはたぶん間違いない。しかし、リアルワールドでは「値だけ」でやっていくことはできない。borrwingとclone()を適宜組合せる必要がある。</li>\n</ul>","frontmatter":{"title":"TAPLのML実装をRustでやってみるシリーズ「4章 算術式のML実装」","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/uehaj-memo/1ac71855d05132d54eb8/","previous":{"fields":{"slug":"/uehaj-memo/1b7f0a86596353587466/"},"frontmatter":{"title":"Reactベース静的サイトジェネレータGatsbyの真の力をお見せします"}},"next":{"fields":{"slug":"/uehaj-memo/161f3c943faf35c6aefc/"},"frontmatter":{"title":"TaPLのML実装をRustでやってみるシリーズ「7章 ラムダ計算のML実装」"}}}}}