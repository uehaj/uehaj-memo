{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/uehaj-memo/25caa06ce666fc175d99/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog Grommet v2","author":"Ivan Ganev"}},"markdownRemark":{"id":"1f9541a9-0b85-53b9-921b-dc132da2981c","excerpt":"オフラインリアルタイムどう書くの過去問題「分岐と行き止まり」を、Rust(rustc 1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-07))で解きました。(他の言語での回答はこちら) Rustの感想 Rust…","html":"<p><a href=\"https://yhpg.doorkeeper.jp/\">オフラインリアルタイムどう書く</a>の<a href=\"http://nabetani.sakura.ne.jp/hena/ord27raswi/\">過去問題「分岐と行き止まり」</a>を、Rust(rustc 1.0.0-nightly (2fc8b1e7c 2015-03-07) (built 2015-03-07))で解きました。(他の言語での回答は<a href=\"http://qiita.com/Nabetani/items/23ebddb44f0234e7fb15\">こちら</a>)</p>\n<h1>Rustの感想</h1>\n<ul>\n<li>Rustは関数型プログラミングには向いてない、と思ったが、勘違いだった。<strong>やればできる</strong>。</li>\n<li>やればできるのだが(後述)、iter(),into_iter()とcollect::&#x3C;>()だらけのこれが関数型と呼べるのか、関数型プログラミングの成立条件には、簡潔さというものは必須条件なのではないか? あるいはiter()とcollect()は慣れると見えなくなるのか。</li>\n<li>ただ、ライブラリの作りとしては関数型プログラミングの道具立はそろえられている。<a href=\"http://doc.rust-lang.org/std/iter/trait.IteratorExt.html\">flat_mapしかり、zip, fold, fuse, ..</a>。</li>\n<li>ちなみに、iter(),into_iter()はコレクション(Vec,..)をイテレータに変換、collect()はその逆。</li>\n<li>mapやfilterなどの処理は、イテレータ上で行う(Java8のstreamみたいなもんですね)。</li>\n<li>iter()は繰り返し要素がborrowing(&#x26;, ポインタ参照)でわたってくる。</li>\n<li>into_iterは値渡しで、(Copy traitをderiveしてなければ)ムーブセマンティクス。</li>\n<li>rustcの<strong>エラーメッセージは丁寧ですばらしい</strong>、賞賛すべきレベル。学習者にとっては、このエラーメッセージが死活的に重要。エラーメッセージがこれほど丁寧でなれば、このレベルのプログラムでも絶対書けなかった(断言)。</li>\n<li>今でもRustは<strong>どんどん変更されている</strong>。さすがにbreaking changeの頻度は少なくなっていると思うが、この程度のプログラムでも影響のある変更は結構ある。エラーメッセージがわかりやすくなってたりもするので、できるかぎりnightlyを追うべし。</li>\n</ul>\n<h1>Rustが関数型プログラミングに向いてないと思った理由と、乗り越えるための対策</h1>\n<ul>\n<li>コレクションライブラリが破壊的操作ベース(sort,dedup) </li>\n<li>(対策) → BTreeSetを使う</li>\n<li>文字列操作も同じく破壊的操作ベース。結合するのにpush_str()とか。破壊的以前に煩雑で死ぬ。</li>\n<li>(対策) → format!()マクロを多用。</li>\n<li>式中の関数返り値はその場だけのテンポラリなライフタイムなので、直接・間接に後でも使う場合、ローカル変数に保存してライフタイムで延長することで回避するしかないかと思った。</li>\n<li>(対策) → into_iter()でムーブセマンティクスにすることで回避。<strong>値渡しがRustの基本</strong>であると心に刻む。</li>\n<li>(クロージャにmove接頭辞を付ける(move |a| ..)のも関係がありそうだが、どういうときに使うのだろうか謎)</li>\n<li>collectは多相だが、どんな型を返したいのかを示せる型情報が引数やselfでは与えられないため、多相性の解決を代入先の変数の型で指定するしかないのでは。</li>\n<li>(対策)→collect::&#x3C;Vec&#x3C;String>>()みたいに型アノテーションを使用できる。このとき、「collect::&#x3C;Vec&#x3C;_>>()」のように要素の型は指定しなくても推論されるようだ。</li>\n</ul>\n<h1>コード</h1>\n<pre><code class=\"language-rust\">/*\nhttp://nabetani.sakura.ne.jp/hena/ord27raswi/\n*/\n#![feature(collections)]\n#![feature(core)]\n\nextern crate core;\nuse std::string::String;\nuse std::collections::BTreeSet;\nuse core::iter::FromIterator;\n\nstatic PATHS:[(char, char);21]\n    = [('1','a'),('1','g'),('2','d'),('2','h'),\n       ('3','b'),('3','f'),('a','b'),('b','5'),\n       ('b','c'),('c','4'),('c','6'),('d','c'),\n       ('d','e'),('e','5'),('f','g'),('g','c'),\n       ('g','e'),('g','h'),('h','4'),('h','i'),\n       ('i','6')];\n \nfn traverse(node:char, stopper:&#x26;str) -> Vec&#x3C;String> {\n    if stopper.contains(node) {\n        vec![]\n    }\n    else if node == '4' || node == '5' || node == '6' {\n        vec![format!(\"{}\", node)]\n    }\n    else {\n        PATHS\n            .iter()\n            .filter(|&#x26;&#x26;(beg,_)|{beg==node})\n            .flat_map(|&#x26;(_,end)|traverse(end, stopper).into_iter())\n            .collect()\n    }\n}\n\nfn solve(stopper:&#x26;str) -> Vec&#x3C;String> {\n    BTreeSet::from_iter(\n        ['1','2','3']\n            .iter()\n            .flat_map(|start_point|\n                      traverse(*start_point, stopper)\n                      .iter()\n                      .map(|end_point| format!(\"{}{}\", *start_point, end_point))\n                      .collect::&#x3C;Vec&#x3C;String>>()\n                      .into_iter()\n                      )).into_iter().collect::&#x3C;Vec&#x3C;String>>()\n}\n\nfn test(stopper: &#x26;str, expected: &#x26;str) {\n    let mut answer = solve(stopper)\n        .iter()\n        .map(|s| s.as_slice())\n        .collect::&#x3C;Vec&#x3C;&#x26;str>>().connect(\",\");\n    if answer == \"\" {\n        answer = String::from_str(\"-\");\n    }\n    assert_eq!(answer, expected);\n}\n\nfn main() {\n/*0*/ test( \"befi\", \"14,16,24,26\" );    \n/*1*/ test( \"abc\", \"14,15,16,24,25,26,34,35,36\" );    \n/*2*/ test( \"de\", \"14,15,16,24,26,34,35,36\" );    \n/*3*/ test( \"fghi\", \"14,15,16,24,25,26,34,35,36\" );    \n/*4*/ test( \"abcdefghi\", \"-\" );    \n/*5*/ test( \"ag\", \"24,25,26,34,35,36\" );    \n/*6*/ test( \"dh\", \"14,15,16,34,35,36\" );    \n/*7*/ test( \"bf\", \"14,15,16,24,25,26\" );    \n/*8*/ test( \"ch\", \"15,25,35\" );    \n/*9*/ test( \"be\", \"14,16,24,26,34,36\" );    \n/*10*/ test( \"ci\", \"14,15,24,25,34,35\" );    \n/*11*/ test( \"cgi\", \"15,24,25,35\" );    \n/*12*/ test( \"acgi\", \"24,25,35\" );    \n/*13*/ test( \"cdefghi\", \"15,35\" );    \n/*14*/ test( \"acdefghi\", \"35\" );    \n/*15*/ test( \"cdegi\", \"15,24,35\" );    \n/*16*/ test( \"bcdegi\", \"24\" );    \n/*17*/ test( \"afh\", \"14,15,16,24,25,26,34,35,36\" );    \n/*18*/ test( \"abfh\", \"14,15,16,24,25,26\" );    \n/*19*/ test( \"dfh\", \"14,15,16,34,35,36\" );    \n/*20*/ test( \"cdfh\", \"15,35\" );    \n/*21*/ test( \"deh\", \"14,15,16,34,35,36\" );    \n/*22*/ test( \"cdeh\", \"15,35\" );    \n/*23*/ test( \"abefgh\", \"24,26\" );    \n/*24*/ test( \"abdefgh\", \"-\" );    \n/*25*/ test( \"acfghi\", \"25,35\" );    \n/*26*/ test( \"acdfghi\", \"35\" );    \n/*27*/ test( \"cegi\", \"15,24,35\" );    \n/*28*/ test( \"abcfhi\", \"15,25\" );    \n/*29*/ test( \"abcefhi\", \"-\" );    \n/*30*/ test( \"abdi\", \"14,15,16,24,34,35,36\" );    \n/*31*/ test( \"abdfi\", \"14,15,16,24\" );    \n/*32*/ test( \"bdi\", \"14,15,16,24,34,35,36\" );    \n/*33*/ test( \"bdfi\", \"14,15,16,24\" );    \n/*34*/ test( \"adfh\", \"14,15,16,34,35,36\" );    \n/*35*/ test( \"adfgh\", \"34,35,36\" );    \n/*36*/ test( \"acdfhi\", \"15,35\" );    \n/*37*/ test( \"bcdfgi\", \"24\" );    \n/*38*/ test( \"bcdfghi\", \"-\" );    \n/*39*/ test( \"defi\", \"14,15,16,24,34,35,36\" );    \n/*40*/ test( \"defhi\", \"14,15,16,34,35,36\" );    \n/*41*/ test( \"cdefg\", \"15,24,26,35\" );    \n/*42*/ test( \"cdefgi\", \"15,24,35\" );    \n/*43*/ test( \"bdefg\", \"24,26\" );    \n/*44*/ test( \"bdefgi\", \"24\" );    \n}\n</code></pre>","frontmatter":{"title":"第27回 オフラインリアルタイムどう書くの問題「分岐と行き止まり」をRustで解く","date":"February 20, 2020","cover":null}}},"pageContext":{"slug":"/uehaj-memo/25caa06ce666fc175d99/","previous":{"fields":{"slug":"/uehaj-memo/3a65b9c7dcbcc800fbf4/"},"frontmatter":{"title":"スタンドアローンGORMをGroovyスクリプトからシュっと利用する"}},"next":{"fields":{"slug":"/uehaj-memo/1b7f0a86596353587466/"},"frontmatter":{"title":"Reactベース静的サイトジェネレータGatsbyの真の力をお見せします"}}}}}